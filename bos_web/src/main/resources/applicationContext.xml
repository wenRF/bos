<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://cxf.apache.org/jaxws 
		http://cxf.apache.org/schemas/jaxws.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd">
        


	<!-- 引入外部文件 -->
	<context:property-placeholder location="classpath:db.properties" />

	<!-- dataSource数据源 -->
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	<!-- 配置spring整合hibernate的session工厂 -->

	<bean class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"
		id="sessionFactory">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置hibernate的基本属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<!-- 配置实体类映射文件 -->
		<property name="mappingLocations">
			<array>
				<value>classpath:cn/itcast/bos/domain/*.hbm.xml</value>
			</array>
		</property>
	</bean>

	<!-- 配置hibernate事务管理器 -->
	<bean class="org.springframework.orm.hibernate5.HibernateTransactionManager"
		id="transactionManager">
		<!-- 注入sessionFactory -->
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 开启组件扫描器 -->
	<context:component-scan base-package="cn.itcast.bos" />
	<!-- 开启spring注解 -->
	<context:annotation-config />
	<!-- 开启事务注解 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
					
	<!-- 客户端配置标签<jaxws:client> 
		id：id属性，为了获取服务接口的实例
		address：完整服务地址，不是wsdl地址
		serviceClass：服务接口
	-->
	<jaxws:client id="customerService"
		address="http://localhost:8080/crm/cxf/customer"
		serviceClass="cn.itcast.crm.service.ICustomerService"/>
	
	
	<!-- 配置shiro框架的过滤工厂bean,用于创建shiro的过滤器 -->	
	
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	<!-- 注入安全管理器 -->
	<property name="securityManager" ref="securityManager"></property>
	<!-- 配置用户未登录跳转的登陆界面：loginUrl -->
		<property name="loginUrl" value="/login.jsp"/>
		<!-- 配置登录成功之后跳转的界面： successUrl-->
		<property name="successUrl" value="/index.jsp"/>
		<!-- 配置未授权跳转的界面 ：unauthorizedUrl-->
		<property name="unauthorizedUrl" value="/unauthorizedUrl.jsp"/>
	<!-- 配置权限过滤链 -->
	<property name="filterChainDefinitions">
		<value>
				/css/** = anon
				/js/** = anon
				/images/** = anon
				/validatecode.jsp* = anon
				/login.jsp* = anon
				/userAction_login.action = anon
				/page_base_staff.action = perms["staff"]
				/* = authc
		</value>	
	</property>	
	</bean>
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="bosRealm"/>
		<!-- 注入缓存管理器 -->
		<property name="cacheManager" ref="cacheManager"/>
	</bean>
	
	<!-- 配置realm -->
	
	<bean id="bosRealm" class="cn.itcast.bos.realm.BosRealm"></bean>
	
	
	<!-- 开启注解和代理 -->
	<!-- 配置自动代理：各类生成代理类 -->
	<bean id="" class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
		<!-- proxyTargetClass是设置代理类生成的方式 true 使用cglib 继承的方式 false 使用java接口 接口的方式 -->
		<property name="proxyTargetClass" value="true"></property>
	</bean>
	<!-- 开启shiro注解：标识哪些类需要生成代理类 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"></bean>
	
	
	<!-- 配置缓存管理器 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
	</bean>
	
	
	<!-- 配置任务类 -->
	<bean id="mailJob" class="cn.itcast.bos.quartz.Mailjobs">
		<property name="smtpServer" value="smtp.126.com"/>
		<property name="username" value="itcast_server@126.com"/>
		<property name="password" value="147963qP"/>
	</bean>
	
	<!-- 配置任务描述类 -->
	<bean id="mailJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="mailJob"></property>  <!-- 任务类的id属性 -->
		<property name="targetMethod" value="sendEmail"></property> <!-- 任务类的方法名 -->
	</bean>
	
	<!-- 配置触发器 -->
	<bean id="mailJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<!-- 注入任务描述类 -->
		<property name="jobDetail" ref="mailJobDetail"/>
		<!-- 指定触发是cron表达式：每10秒触发一次 -->
		<property name="cronExpression" value="0 19 11,17 * * ? *"/>
	</bean>
	
	<!-- 配置调用器 -->
	<bean id="startQuartz" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- 注入触发器 -->
		<property name="triggers">
			<list>
				<ref bean="mailJobTrigger"/>
			</list>
		</property>
	</bean>
</beans>